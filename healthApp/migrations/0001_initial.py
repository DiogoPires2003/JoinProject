# Generated by Django 4.2.20 on 2025-06-18 10:06

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('start_hour', models.TimeField(default=datetime.time(9, 0))),
                ('end_hour', models.TimeField(default=datetime.time(10, 0))),
                ('state', models.CharField(choices=[('AUT', 'Autorizada por mutua'), ('DEN', 'Autorizacion denegada'), ('CON', 'Confirmada')], default='PEN', max_length=3, verbose_name='Estado')),
            ],
            options={
                'verbose_name': 'Appointment',
                'verbose_name_plural': 'Appointments',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='El nombre debe contener solo letras', regex='^[A-Za-z\\s]+$')])),
                ('last_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='El apellido debe contener solo letras', regex='^[A-Za-z\\s]+$')])),
                ('dni', models.CharField(max_length=9, unique=True, validators=[django.core.validators.RegexValidator(message='El DNI debe tener 8 dígitos seguidos de una letra', regex='^\\d{8}[A-Z]$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=9, validators=[django.core.validators.RegexValidator(message='El número de teléfono debe tener 9 dígitos', regex='^\\d{9}$')])),
                ('has_insurance', models.BooleanField(default=False)),
                ('insurance_number', models.CharField(blank=True, error_messages={'blank': 'El número de seguro no puede estar en blanco.', 'null': 'El número de seguro no puede estar vacío.', 'unique': 'Ya existe un paciente con este número de seguro.'}, max_length=12, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='El número de seguro debe comenzar con una letra seguida de 5 dígitos.', regex='^[A-Za-z]\\d{5}$')])),
                ('password', models.CharField(max_length=128, validators=[django.core.validators.MinLengthValidator(8, message='La contraseña debe tener al menos 8 caracteres.')])),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True)),
                ('service_type', models.CharField(choices=[('CON', 'Consulta'), ('PRU', 'Prueba'), ('TRA', 'Tratamiento'), ('CIR', 'Cirugía')], default='CON', max_length=3)),
                ('price', models.DecimalField(decimal_places=2, help_text='Precio en euros', max_digits=8)),
                ('covered_by_insurance', models.BooleanField(default=False, verbose_name='Incluido en mutua')),
                ('duration', models.PositiveIntegerField(default=30, help_text='Duración en minutos')),
                ('available', models.BooleanField(default=True, help_text='Indica si el servicio está disponible actualmente', verbose_name='Disponible')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='healthApp.role')),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attended', models.BooleanField(default=False)),
                ('marked_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='healthApp.appointment')),
            ],
            options={
                'verbose_name': 'Attendance',
                'verbose_name_plural': 'Attendances',
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthApp.patient'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='healthApp.service'),
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together={('patient', 'date', 'start_hour', 'end_hour')},
        ),
    ]
